spring.kafka.consumer.bootstrap-servers=192.168.0.207:9092
# Consumer cluster group id
spring.kafka.consumer.group-id=myGroup
# this parameter specifies what to do when there is no initial offset
spring.kafka.consumer.auto-offset-reset=earliest
# receives the bytes from Kafka and recreates the business objects.(opposite of serialization)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# We will use JSONDeserializer for value
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Kafka consumer deserialize all the classes from this package
spring.kafka.consumer.properties.spring.json.trusted.packages=*


spring.kafka.producer.bootstrap-servers=192.168.0.207:9092
# The serialization process transforms the business objects you want to send to Kafka into bytes
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# We will use JSONSerializer for value
spring.kafka.consumer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer